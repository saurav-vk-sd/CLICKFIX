package com.cts.clickfix.appconfig;

import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;
import org.springframework.http.HttpMethod;
import org.springframework.security.config.Customizer;
import org.springframework.security.config.annotation.web.builders.HttpSecurity;
import org.springframework.security.config.annotation.web.configuration.EnableWebSecurity;
import org.springframework.security.core.userdetails.User;
import org.springframework.security.core.userdetails.UserDetails;
import org.springframework.security.core.userdetails.UserDetailsService;
import org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder;
import org.springframework.security.crypto.password.PasswordEncoder;
import org.springframework.security.provisioning.InMemoryUserDetailsManager;
import org.springframework.security.web.SecurityFilterChain;

@Configuration
@EnableWebSecurity
public class AppSecurityConfig {
	
	@Bean
	SecurityFilterChain securityFilterChain(HttpSecurity http) throws Exception{
		
		http.authorizeHttpRequests((auth) -> {
			auth
			.requestMatchers(HttpMethod.POST , "/**").permitAll()
			.requestMatchers(HttpMethod.PUT , "/**").permitAll()
			.requestMatchers(HttpMethod.GET , "/**").permitAll()
			.requestMatchers(HttpMethod.PATCH , "/**").permitAll()
			.anyRequest().authenticated();
		});
		
		http.csrf(csrf -> csrf.disable());
		http.httpBasic(Customizer.withDefaults());
		return http.build();
		
	}
	
	@Bean
	PasswordEncoder passwordEncoder() {
		return new BCryptPasswordEncoder();
	}
	
	@Bean
	UserDetailsService userDetailsService() {
		UserDetails userDetails = User.builder()
				                      .username("saurav")
				                      .password(passwordEncoder().encode("svk@2412"))
				                      .roles("ADMIN")
				                      .build();
		return new InMemoryUserDetailsManager(userDetails);
	}
}