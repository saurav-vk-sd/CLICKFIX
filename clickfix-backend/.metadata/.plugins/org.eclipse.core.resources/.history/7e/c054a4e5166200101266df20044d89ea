package com.cts.clickfix.controller;

import java.util.List;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
//import java.util.Optional;
//import java.util.stream.Collectors;
import java.util.Map;

//import org.modelmapper.ModelMapper;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.CrossOrigin;
import org.springframework.web.bind.annotation.DeleteMapping;
//import org.springframework.web.bind.annotation.ExceptionHandler;
//import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PatchMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.PutMapping;
import org.springframework.web.bind.annotation.RequestBody;
//import org.springframework.web.bind.annotation.RequestMapping;
//import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
//import org.springframework.web.bind.annotation.ResponseBody;
import org.springframework.web.bind.annotation.RestController;

import com.cts.clickfix.service.InvoiceService;
import com.cts.clickfix.entity.Invoice;
import com.cts.clickfix.model.BillToDto;
import com.cts.clickfix.model.InvoiceDto;
import com.cts.clickfix.model.InvoiceHistoryDto;
import com.cts.clickfix.model.InvoiceReciptDto;
import com.cts.clickfix.model.PayableDto;

import jakarta.validation.Valid;
//import com.cts.clickfix.repository.InvoiceRepository;

@RestController
@CrossOrigin(origins = "http://localhost:5173")
public class InvoiceController {
	
   private static final Logger logger = LoggerFactory.getLogger(InvoiceController.class);

	
//	private InvoiceDto invoiceModel = new InvoiceDto();
	
//	@Autowired
//	private InvoiceRepository invoiceRepository;
	
//	@Autowired
//	private ModelMapper modelMapper;
	
	@Autowired 
	InvoiceService invoiceService;
	
	
	//-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------
	//Exception Hander for Invalid invoice ID
	
//	@ExceptionHandler(exception = InvoiceNotFoundException.class)
//	public ApplicationGlobalException invalidIDException(InvoiceNotFoundException e) {
//		return e.getMessage();
//	}
	
    //-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------
	//function to generate and display invoices
	
	@PostMapping("/invoice/create" )
	public InvoiceDto generateInvoice(@Valid @RequestBody InvoiceDto invoice) {
		
		InvoiceDto invoiceObj = invoiceService.generateInvoice(invoice);
		return invoiceObj;
		
	}
	
	
	//-----------------------------------------------------------------------------------------------------------------
	//function to display invoice by invoice ID
	
	@GetMapping("/invoice/find/{invoiceId}")
	public InvoiceDto findInvoiceById(@PathVariable int invoiceId) {
		InvoiceDto resObj = invoiceService.getInvoiceById(invoiceId);
		return resObj;
	}
	
	
	//-------------------------------------------------------------------------------------------------------------------
	//function to display all invoices belonging to a particular payment status
	
	@GetMapping("/invoice/status")
	public List<InvoiceDto> paymentStatusList(@RequestParam String paymentStatus) {		
		return invoiceService.paymentStatusList(paymentStatus);		
	}
	
	
	//-------------------------------------------------------------------------------------------------------------------------
	//function to update invoice details
	
	@PutMapping( "/invoice/update" )
	public ResponseEntity<Map<String , Object>> updateInvoiceDetails(@RequestBody InvoiceDto invoice) {
			return invoiceService.updateInvoiceDetails(invoice);
	}
	
	//-------------------------------------------------------------------------------------------------------------------------------
	//function to delete an invoice
	
	@DeleteMapping("/invoice/delete")
	public InvoiceDto deleteInvoice(@RequestParam int invoiceId) {
		return invoiceService.deleteInvoice(invoiceId); 
	}
	
	@GetMapping("/invoice/findbybooking/{bookingId}")
	public List<InvoiceDto> findInvoiceByBooking(@PathVariable int bookingId) {
		  return invoiceService.findInvoiceByBooking(bookingId);
	}
	
	@GetMapping("/invoice/userdetails/{bookingId}")
	public BillToDto getUserDetailsForInvoice(@PathVariable int bookingId) {
		return invoiceService.getUserDetailsForInvoice(bookingId);
	}
	
	@GetMapping("/invoice/displayrecipt/{invoiceId}")
	public InvoiceReciptDto getRecipt(@PathVariable ("invoiceId") int invoiceId) {
		return invoiceService.generateRecipt(invoiceId);
	}
	
	@GetMapping("/invoice/getinvoiceId/{bookingId}")
	public int getInvoiceId(@PathVariable("bookingId") int bookingId) {
		return invoiceService.getInvoiceId(bookingId);
	}
	
	@GetMapping("/invoice/getinvoicehistoryrecipt/{userId}")
	public List<InvoiceHistoryDto> getReciptsForHistory(@PathVariable ("userId") int userId) {
		return invoiceService.displayHistory(userId);
	}
}
